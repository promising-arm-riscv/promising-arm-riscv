AArch64 fixed_spinlock_ur2
{
    uint32_t lock = 0; uint64_t obj = 0; uint64_t ptr = obj;
    0:X0 = lock; 0:X10 = ptr; 0:X11 = obj;
    1:X0 = lock; 1:X10 = ptr;
}

P0 | P1;

(* P0 *)
                               |; 
(* ptr = 0; smp_mb();       *) |; 
MOV X1, #0                     |; 
STR X1, [X10]                  |; 
DMB SY                         |; 
                               |; 
(* spin_unlock_wait(&lock); *) |; 
    DMB ISH                    |; 
    LDRH W1, [X0]              |; 
    LSL W1, W1, #16            |; 
reload:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload2            |; 
    B outu                     |; 
free:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload2           |; 
    B outu                     |; 

reload2:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free2               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload3            |; 
    B outu                     |; 
free2:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload3           |; 
    B outu                     |; 

reload3:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free3               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload4            |; 
    B outu                     |; 
free3:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload4           |; 
    B outu                     |; 

reload4:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free4               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload5            |; 
    B outu                     |; 
free4:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload5           |; 
    B outu                     |; 

reload5:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free5               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload6            |; 
    B outu                     |; 
free5:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload6           |; 
    B outu                     |; 

reload6:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free6               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload7            |; 
    B outu                     |; 
free6:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload7           |; 
    B outu                     |; 

reload7:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free7               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload8            |; 
    B outu                     |; 
free7:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload8           |; 
    B outu                     |; 

reload8:                        |; 
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free8               |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, reload9            |; 
    B outu                     |; 
free8:                          |; 
    STXR W3, W2, [X0]          |; 
    CBNZ W3, reload9           |; 
    B outu                     |; 

reload9:                       |;  
    LDAXR W2, [X0]             |; 
    EOR W3, W2, W2, ROR #16    |; 
    CBZ W3, free9              |; 
    EOR W3, W1, W2, LSL #16    |; 
    CBZ W3, (* reload *) end   |; 
    B outu                     |; 
free9:                         |; 
    STXR W3, W2, [X0]          |;
    CBNZ W3, (* reload *) end  |;
outu:                          |;
                               |;
(* smp_mb(); obj = 1;       *) |;
DMB SY                         |;
MOV X0, #1                     |;
STR X0, [X11]                  |;
                               |;
                               |;
                               |;
                               |;
end:                           |;

(* P1 *)
| enq:                             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBZ    W3, enqed             ;
|     LDAXR   W1, [X0]             ;
|     ADD     W2, W1, #16, LSL #12 ;
|     STXR    W3, W2, [X0]         ;
|     CBNZ    W3, end              ;
| enqed:                           ;
|     EOR     W2, W1, W1, ROR #16  ;
|     CBZ     W2, outl             ;
| spinl:                           ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBZ    W2, outl              ;
|     LDAXRH  W3, [X0]             ;
|     EOR     W2, W3, W1, LSR #16  ;
|     CBNZ    W2, end              ;
| outl:                            ;
|                                  ;
| (* if (ptr) BUG_ON( *ptr );   *) ;
|     LDR     X0, [X10]            ;
|     MOV     X1, #0               ;
|     CBZ     X0, end              ;
|     LDR     X1, [X0]             ;
|                                  ;
| end:                             ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;
|                                  ;

~exists (1:X1=1)